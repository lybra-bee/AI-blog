#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import shutil
import re
import textwrap
from PIL import Image, ImageDraw, ImageFont
import time
import logging
import argparse
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
POSTS_DIR = "content/posts"
IMAGES_DIR = "assets/images/posts"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(IMAGES_DIR, exist_ok=True)

# API-–∫–ª—é—á–∏ (–ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ –æ–Ω–∏ –µ—Å—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not OPENROUTER_API_KEY:
    logging.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
if not GROQ_API_KEY:
    logging.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def generate_text(prompt: str, model="gpt-4o-mini") -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API
    """
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}],
    }

    logging.info("üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter...")
    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    if response.status_code != 200:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter API: {response.status_code} {response.text}")
        return ""

    result = response.json()
    return result["choices"][0]["message"]["content"]


def generate_image(prompt: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Groq API (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å)
    """
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {"prompt": prompt}

    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    response = requests.post("https://api.groq.com/v1/images", headers=headers, json=data)

    if response.status_code != 200:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Groq API: {response.status_code} {response.text}")
        return ""

    result = response.json()
    img_b64 = result.get("data", [{}])[0].get("b64_json")

    if not img_b64:
        logging.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return ""

    img_data = base64.b64decode(img_b64)

    filename = f"{datetime.now().strftime('%Y-%m-%d-%H%M%S')}-image.png"
    filepath = os.path.join(IMAGES_DIR, filename)

    with open(filepath, "wb") as f:
        f.write(img_data)

    logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filepath}")
    return f"/{filepath}"


def create_post():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    """
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏...")

    title_prompt = "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –æ –±—É–¥—É—â–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."
    title = generate_text(title_prompt).strip()

    article_prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: {title}. –¢–µ–º–∞ ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –ò–ò, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –û–±—ä–µ–º: 5-6 –∞–±–∑–∞—Ü–µ–≤."
    content = generate_text(article_prompt).strip()

    image_prompt = f"–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—å–∏: {title}"
    image_path = generate_image(image_prompt)

    # –ò–º—è —Ñ–∞–π–ª–∞
    date_str = datetime.now().strftime("%Y-%m-%d")
    slug = re.sub(r"[^a-zA-Z0-9]+", "-", title.lower()).strip("-")
    filename = f"{date_str}-{slug}.md"
    filepath = os.path.join(POSTS_DIR, filename)

    # Frontmatter + –∫–æ–Ω—Ç–µ–Ω—Ç
    frontmatter = [
        "---",
        f'title: "{title.replace("\"", "\\\"")}"',
        f"date: {datetime.now(timezone.utc).isoformat()}",
        f"image: {image_path}",
        "---",
        "",
    ]

    with open(filepath, "w", encoding="utf-8") as f:
        f.write("\n".join(frontmatter))
        f.write(content)

    logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {filepath}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--count", type=int, default=1, help="–°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    args = parser.parse_args()

    for _ in range(args.count):
        create_post()
        time.sleep(2)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
